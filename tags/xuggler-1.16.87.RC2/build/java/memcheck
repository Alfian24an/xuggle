#!/bin/sh
# Copyright (c) 2008 by Xuggle Inc.  All rights reserved.
#
# It is REQUESTED BUT NOT REQUIRED if you use this library, that you let 
# us know by sending e-mail to info\@xuggle.com telling us briefly how you're
# using the library and what you like or don't like about it.
#
# This library is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free Software
# Foundation; either version 2.1 of the License, or (at your option) any later
# version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this library; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

# Runs Valgrind on any native test objects.
#
# To have this work, you need to run this from the output
# directory where tests are supposed to run.  Specifically
# build/test/output
# relative to the root of the build path.
#
# Unfortunately this script can't easily detect where that is relative
# to where you are... so go to the right directory, and call this.

#echo "VS_MEMCHECK_LOGFILE=$VS_MEMCHECK_LOGFILE"
#echo "VALGRIND_SUPPRESSIONS=$VALGRIND_SUPPRESSIONS"
#echo "VS_TEST_FIXTUREDIR=$VS_TEST_FIXTUREDIR"
#echo "MEMCHECK command: $*"
# if VS_MEMCHECK_LOGFILE is not specified, then create a log file.
if [ "x$VS_MEMCHECK_LOGFILE" = "x" ]; then
VS_MEMCHECK_LOGFILE=$1_memcheck.log
fi

if [ "x$VALGRIND" = "x" ]; then
  export VALGRIND=valgrind
fi

if [ "x$VALGRIND_SUPPRESSIONS" = "x" ]; then
  export VALGRIND_SUPPRESSIONS=../../../mk/Valgrind.suppressions
fi

if [ "x$LIBTOOL" = "x" ]; then
  LIBTOOL_CMD=""
else
# If we're running with LIBTOOL defined, use it
  LIBTOOL_CMD="$LIBTOOL --mode=execute"
fi

# This is the string that valgrind outputs if no leaks are found
VS_MEMCHECK_NOLEAK_STRING="All heap blocks were freed -- no leaks are possible."

TIME_NOW=`date +"%Y-%m-%d %H:%M:%S"`
echo "$TIME_NOW Logging memcheck output to $VS_MEMCHECK_LOGFILE for: $*"
echo "$TIME_NOW Logging memcheck output to $VS_MEMCHECK_LOGFILE for: $*" > $VS_MEMCHECK_LOGFILE

process_status(){
  if [ $1 -ne 0 ]; then
    echo "FAIL!!!!"
    cat $VS_MEMCHECK_LOGFILE
    echo "FAIL!!!! see $VS_MEMCHECK_LOGFILE"
    exit -1;
  fi
}
check_leaks(){
  if [ $1 -ne 0 ]; then
# if Valgrind did not say no leaks are possible, make sure all
# leaks are suppressed
    echo -n "Ensuring no unsuppressed leaks"
    grep -q "definitely lost: 0 bytes in 0 blocks." $VS_MEMCHECK_LOGFILE
    process_status $?
    grep -q "possibly lost: 0 bytes in 0 blocks." $VS_MEMCHECK_LOGFILE
    process_status $?
    grep -q "still reachable: 0 bytes in 0 blocks." $VS_MEMCHECK_LOGFILE
    process_status $?
  fi
}

$LIBTOOL_CMD $VALGRIND --tool=memcheck --error-exitcode=255 --leak-check=full --show-reachable=yes --smc-check=all --suppressions=$VALGRIND_SUPPRESSIONS $* >> $VS_MEMCHECK_LOGFILE 2>&1

process_status $?

TIME_NOW=`date +"%Y-%m-%d %H:%M:%S"`
echo "$TIME_NOW No errors found..."
grep -q "$VS_MEMCHECK_NOLEAK_STRING" $VS_MEMCHECK_LOGFILE
check_leaks $?
TIME_NOW=`date +"%Y-%m-%d %H:%M:%S"`
echo "$TIME_NOW No leaks found"
