/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.37
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.xuggle.xuggler;
import com.xuggle.ferry.*;
/**
 * Converts {@link IVideoPicture} objects of a given width, height and 
 * format to a new  
 * width, height or format.  
 * <p>  
 * This object is only active in GPL-licensed version of the Xuggler. 
 * You can  
 * use the {@link #isSupported()} to determine if you can use this object 
 * (or  
 * the make(...) methods will also return null.  
 * </p>  
 */
public class IVideoResampler extends RefCounted {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  protected IVideoResampler(long cPtr, boolean cMemoryOwn) {
    super(XugglerJNI.SWIGIVideoResamplerUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(IVideoResampler obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new IVideoResampler object that is actually referring to the
   * exact same underlying Native object.
   *
   * This method increases the ref count of the underlying Native object.
   *
   * @return the new Java object.
   */
  public IVideoResampler copyReference() {
    if (swigCPtr == 0)
      return null;
    else
    {
      IVideoResampler retval = new IVideoResampler(swigCPtr, false);
      retval.acquire();
      return retval;
    }
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof IVideoResampler)
      equal = (((IVideoResampler)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      throw new UnsupportedOperationException("C++ destructor does not have public access");
    }
    swigCPtr = 0;
    super.delete();
  }

/**
 * @return	The width we expect on the input frame to the resampler. 
 *		  
 */
  public int getInputWidth() {
    return XugglerJNI.IVideoResampler_getInputWidth(swigCPtr, this);
  }

/**
 * @return	The height we expect on the input frame to the resampler. 
 *		  
 */
  public int getInputHeight() {
    return XugglerJNI.IVideoResampler_getInputHeight(swigCPtr, this);
  }

/**
 * @return	The pixel format we expect on the input frame to the resampler. 
 *		  
 */
  public IPixelFormat.Type getInputPixelFormat() {
    return IPixelFormat.Type.swigToEnum(XugglerJNI.IVideoResampler_getInputPixelFormat(swigCPtr, this));
  }

/**
 * @return	The width we will resample the output frame to  
 */
  public int getOutputWidth() {
    return XugglerJNI.IVideoResampler_getOutputWidth(swigCPtr, this);
  }

/**
 * @return	The height we will resample the output frame to  
 */
  public int getOutputHeight() {
    return XugglerJNI.IVideoResampler_getOutputHeight(swigCPtr, this);
  }

/**
 * @return	The pixel format we will resample the output frame to  
 */
  public IPixelFormat.Type getOutputPixelFormat() {
    return IPixelFormat.Type.swigToEnum(XugglerJNI.IVideoResampler_getOutputPixelFormat(swigCPtr, this));
  }

/**
 * Resample pInFrame to pOutFrame based on the resampler parameters. 
 *  
 * Resamples the pInFrame based on the parameters set when  
 * this resampler was constructed.  
 * @param	pOutFrame The frame we'll resample to. Check  
 * pOutFrame->isComplete() after the call.  
 * @param	pInFrame THe frame we'll resample from.  
 * @return	>= 0 on success; <0 on error.  
 */
  public int resample(IVideoPicture pOutFrame, IVideoPicture pInFrame) {
    return XugglerJNI.IVideoResampler_resample(swigCPtr, this, IVideoPicture.getCPtr(pOutFrame), pOutFrame, IVideoPicture.getCPtr(pInFrame), pInFrame);
  }

/**
 * Get a new video resampler. Returns null if {@link #isSupported()} 
 * returns false.  
 * @param	outputWidth The width in pixels you want to output frame to 
 *		 have.  
 * @param	outputHeight The height in pixels you want to output frame 
 *		 to have.  
 * @param	outputFmt The pixel format of the output frame.  
 * @param	inputWidth The width in pixels the input frame will be in. 
 *		  
 * @param	inputHeight The height in pixels the input frame will be in. 
 *		  
 * @param	inputFmt The pixel format of the input frame.  
 * @return	a new object, or null if we cannot allocate one.  
 */
  public static IVideoResampler make(int outputWidth, int outputHeight, IPixelFormat.Type outputFmt, int inputWidth, int inputHeight, IPixelFormat.Type inputFmt) {
    long cPtr = XugglerJNI.IVideoResampler_make(outputWidth, outputHeight, outputFmt.swigValue(), inputWidth, inputHeight, inputFmt.swigValue());
    return (cPtr == 0) ? null : new IVideoResampler(cPtr, false);
  }

/**
 * Returns true if this object is supported.  
 * Currently this is only supported in GPL builds of XUGGLER.  
 * @return	true if the IVideoResampler object is supported; false otherwise. 
 *		  
 */
  public static boolean isSupported() {
    return XugglerJNI.IVideoResampler_isSupported();
  }

}
