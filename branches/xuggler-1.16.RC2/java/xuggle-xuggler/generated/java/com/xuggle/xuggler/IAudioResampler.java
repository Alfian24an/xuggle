/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.37
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.xuggle.xuggler;
import com.xuggle.ferry.*;
/**
 * Used to resample {@link IAudioSamples} to different sample rates 
 * or number of channels.  
 */
public class IAudioResampler extends RefCounted {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  protected IAudioResampler(long cPtr, boolean cMemoryOwn) {
    super(XugglerJNI.SWIGIAudioResamplerUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(IAudioResampler obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new IAudioResampler object that is actually referring to the
   * exact same underlying Native object.
   *
   * This method increases the ref count of the underlying Native object.
   *
   * @return the new Java object.
   */
  public IAudioResampler copyReference() {
    if (swigCPtr == 0)
      return null;
    else
    {
      IAudioResampler retval = new IAudioResampler(swigCPtr, false);
      retval.acquire();
      return retval;
    }
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof IAudioResampler)
      equal = (((IAudioResampler)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      throw new UnsupportedOperationException("C++ destructor does not have public access");
    }
    swigCPtr = 0;
    super.delete();
  }

/**
 * number of channels in output audio.  
 * @return	Number of channels we'll resample the output to.  
 */
  public int getOutputChannels() {
    return XugglerJNI.IAudioResampler_getOutputChannels(swigCPtr, this);
  }

/**
 * sample rate of output audio.  
 * @return	Sample Rate we'll resample the output to.  
 */
  public int getOutputRate() {
    return XugglerJNI.IAudioResampler_getOutputRate(swigCPtr, this);
  }

/**
 * number of channels expected in input audio.  
 * @return	Number of channels we'll expect in the input samples  
 */
  public int getInputChannels() {
    return XugglerJNI.IAudioResampler_getInputChannels(swigCPtr, this);
  }

/**
 * sample rate expected in input audio.  
 * @return	Sample rate we'll expect in the input samples  
 */
  public int getInputRate() {
    return XugglerJNI.IAudioResampler_getInputRate(swigCPtr, this);
  }

/**
 * Re-sample up to numSamples from inputSamples to outputSamples.  
 * This function re-samples the audio in inputSamples to have the same 
 *  
 * number of channels, and the same sample rate, as this {@link IAudioResampler} 
 * was  
 * initialized with.  
 * @param	outputSamples [out] The sample buffer we output to.  
 * @param	inputSamples [in] The samples we're going to re-sample.  
 * @param	numSamples [in] The number of samples from inputSamples to 
 *		 use. if 0,  
 * this defaults to inputSamples.getNumSamples().  
 * @return	Number of samples written to outputSamples, or <0 on error. 
 *		  
 */
  public int resample(IAudioSamples outputSamples, IAudioSamples inputSamples, long numSamples) {
    return XugglerJNI.IAudioResampler_resample(swigCPtr, this, IAudioSamples.getCPtr(outputSamples), outputSamples, IAudioSamples.getCPtr(inputSamples), inputSamples, numSamples);
  }

/**
 * Create a new {@link IAudioResampler} object.  
 * <p>  
 * Creation of {@link IAudioResampler} objects is relatively expensive 
 * compared  
 * to the {@link #resample(IAudioSamples, IAudioSamples, long)} method, 
 *  
 * so users are encouraged to create once and use often.  
 * </p>  
 * @param	outputChannels The number of channels you will want  
 * in resampled audio we output.  
 * @param	inputChannels The number of channels you will pass  
 * in the source audio for resampling.  
 * @param	outputRate The sample rate you will want  
 * in resampled audio we output.  
 * @param	inputRate The sample rate you will pass  
 * in the source audio for resampling.  
 * @return	A new object, or null if we can't allocate one.  
 */
  public static IAudioResampler make(int outputChannels, int inputChannels, int outputRate, int inputRate) {
    long cPtr = XugglerJNI.IAudioResampler_make(outputChannels, inputChannels, outputRate, inputRate);
    return (cPtr == 0) ? null : new IAudioResampler(cPtr, false);
  }

}
