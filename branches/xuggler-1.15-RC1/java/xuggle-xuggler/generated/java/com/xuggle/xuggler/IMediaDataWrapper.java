/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.37
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.xuggle.xuggler;
import com.xuggle.ferry.*;
/**
 * This class wraps an IMediaData object, but then allows you to set 
 *  
 * new TimeStamps and TimeBases.  
 * The underlying wrapped object's time stamps and time bases do not 
 * change. This  
 * can be useful when you need to use a IMediaObject in a time space 
 * that has  
 * different time bases than the frame originally expected, and you 
 * don't  
 * want to change the actual object.  
 */
public class IMediaDataWrapper extends IMediaData {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  protected IMediaDataWrapper(long cPtr, boolean cMemoryOwn) {
    super(XugglerJNI.SWIGIMediaDataWrapperUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(IMediaDataWrapper obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new IMediaDataWrapper object that is actually referring to the
   * exact same underlying Native object.
   *
   * This method increases the ref count of the underlying Native object.
   *
   * @return the new Java object.
   */
  public IMediaDataWrapper copyReference() {
    if (swigCPtr == 0)
      return null;
    else
    {
      IMediaDataWrapper retval = new IMediaDataWrapper(swigCPtr, false);
      retval.acquire();
      return retval;
    }
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof IMediaDataWrapper)
      equal = (((IMediaDataWrapper)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      throw new UnsupportedOperationException("C++ destructor does not have public access");
    }
    swigCPtr = 0;
    super.delete();
  }

/**
 * Return the object being wrapped  
 * @return	the wrapped object  
 */
  public IMediaData get() {
    long cPtr = XugglerJNI.IMediaDataWrapper_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IMediaData(cPtr, false);
  }

/**
 * Set an object to wrap, or null to release the old object.  
 * @param	aObj The object to wrap; null just releases the last object 
 *		  
 */
  public void wrap(IMediaData aObj) {
    XugglerJNI.IMediaDataWrapper_wrap(swigCPtr, this, IMediaData.getCPtr(aObj), aObj);
  }

/**
 * Allows you to reset whether the wrapper things this is key or not. 
 *  
 * Note the underlying wrapped object will continue to keep it's prior 
 * setting.  
 * @param	aIsKey The new key value.  
 */
  public void setKey(boolean aIsKey) {
    XugglerJNI.IMediaDataWrapper_setKey(swigCPtr, this, aIsKey);
  }

/**
 *  
 * @param	obj The object to wrap.  
 * @return	a new object or null on error.  
 */
  public static IMediaDataWrapper make(IMediaData obj) {
    long cPtr = XugglerJNI.IMediaDataWrapper_make(IMediaData.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new IMediaDataWrapper(cPtr, false);
  }

}
