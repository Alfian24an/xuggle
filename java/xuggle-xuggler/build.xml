<?xml version="1.0"?>
<project
  name="xuggle-xuggler"
  default="dist"
  basedir="."
  xmlns:ivy="antlib:org.apache.ivy.ant"
  >
  <description>
    Builder for the Xuggler Java Library
  </description>

  <!-- set global properties for this build -->
  <!-- IMPRORTANT: If this Java build depends on a Native library
       you must also make sure you update the major and minor
       revisions in that library's "configure.ac" file, and
       regenerate the build scripts -->
  <property name="library.version.major" value="1"/>
  <property name="library.version.minor" value="21"/>
  <property name="app.mainclass" value="com.xuggle.xuggler.Xuggler"/>

  <!-- And bring in the standard build rules -->
  <import file="mk/buildtools/buildhelper.xml"/>

  <!-- If we're on windows, auto build the installer when staging -->
  <target name="stage"
    depends="xuggle-buildhelper.stage"
    >
    <echo message="Staging Java Jars to right location"/>
    <mkdir dir="${dist.dir}/stage/${xuggle.dir}/share/java/jars"/>
    <copy todir="${dist.dir}/stage/${xuggle.dir}/share/java/jars">
      <fileset dir="${dist.dir}/lib">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
    <echo message="Generating Installer source files from templates"/>
    <copy failonerror="false" todir="${build.dir}">
      <fileset dir="${top.dir}${file.separator}mk">
        <include name="**/*.in"/>
      </fileset>
      <filterset>
        <filter token="LIB_MAJOR_VERSION" value="${library.version.major}"/>
        <filter token="LIB_MINOR_VERSION" value="${library.version.minor}"/>
        <filter token="LIB_REVISION" value="${library.revision}"/>
      </filterset>
      <globmapper from="*.in" to="*"/>
    </copy>
    <if>
      <isset property="os.windows"/>
      <then>
        <if>
          <available file="build/windowsx86.nsi"/>
          <then>
            <exec executable="makensis"
              failonerror="true"
              failifexecutionfails="false"
              >
              <arg value="/DXUGGLE_HOME=${dist.dir}${file.separator}stage${xuggle.dir}"/>
              <arg value="build/windowsx86.nsi"/>
            </exec>
          </then>
          <else>
            <echo message="could not find NSI file"/>
          </else>
        </if>
      </then>
    </if>
  </target>
  <target name="install-java"
    depends="xuggle-buildhelper.install-java, install-red5">
  </target>

  <target
    name="install-red5"
    depends="uninstall-red5"
    description="Installed Red5 applications to $RED5_HOME">
    <echo message="Installing ${app.name}.jar with native dependencies to: ${env.RED5_HOME}"/>
    <if>
      <available file="${env.RED5_HOME}"/>
      <then>
        <copy todir="${env.RED5_HOME}/lib">
          <fileset dir="${dist.dir}/lib">
            <include name="${app.name}.jar"/>
          </fileset>
        </copy>
      </then>
    </if>
  </target>
  <target name="uninstall-java"
    depends="uninstall-red5, xuggle-buildhelper.uninstall-java"
    >
  </target>
  <target
    name="uninstall-red5"
    description="Installed Red5 applications to $RED5_HOME">
    <if>
      <available file="${env.RED5_HOME}/lib"/>
      <then>
        <echo message="Uninstalling ${app.name}.jar with native dependencies from: ${env.RED5_HOME}"/>
        <delete>
          <fileset dir="${env.RED5_HOME}/lib"
            includes="${app.name}*.jar"
            />
        </delete>
      </then>
    </if>
  </target>

</project>

