/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.37
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


// Native.i: Start generated code
// >>>>>>>>>>>>>>>>>>>>>>>>>>>
#include <com/xuggle/ferry/JNIHelper.h>
/*
 * This will be called if an when we're loaded
 * directly by Java.  If we're linked to via
 * C/C++ linkage on another library, they
 * must call sSetVM().
 */
JNIEXPORT jint JNICALL
JNI_OnLoad(JavaVM *jvm, void *)
{
  if (!com::xuggle::ferry::JNIHelper::sGetVM())
    com::xuggle::ferry::JNIHelper::sSetVM(jvm);
  return com::xuggle::ferry::JNIHelper::sGetJNIVersion();
}

#include <com/xuggle/xuggler/IPixelFormat.h>
#include <com/xuggle/xuggler/ITimeValue.h>
#include <com/xuggle/xuggler/IRational.h>
#include <com/xuggle/xuggler/IMediaData.h>
#include <com/xuggle/xuggler/IMediaDataWrapper.h>
#include <com/xuggle/xuggler/ICodec.h>
#include <com/xuggle/xuggler/IPacket.h>
#include <com/xuggle/xuggler/IAudioSamples.h>
#include <com/xuggle/xuggler/IAudioResampler.h>
#include <com/xuggle/xuggler/IVideoPicture.h>
#include <com/xuggle/xuggler/IVideoResampler.h>
#include <com/xuggle/xuggler/IStreamCoder.h>
#include <com/xuggle/xuggler/IStream.h>
#include <com/xuggle/xuggler/IContainerFormat.h>
#include <com/xuggle/xuggler/IContainer.h>
#include <com/xuggle/xuggler/Global.h>

using namespace VS_CPP_NAMESPACE;

// <<<<<<<<<<<<<<<<<<<<<<<<<<<
// Native.i: End generated code



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPixelFormat_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IPixelFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IPixelFormat::Type)com::xuggle::xuggler::IPixelFormat::NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPixelFormat_1YUV_1Y_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IPixelFormat::YUVColorComponent result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IPixelFormat::YUVColorComponent)com::xuggle::xuggler::IPixelFormat::YUV_Y;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPixelFormat_1YUV_1U_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IPixelFormat::YUVColorComponent result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IPixelFormat::YUVColorComponent)com::xuggle::xuggler::IPixelFormat::YUV_U;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPixelFormat_1YUV_1V_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IPixelFormat::YUVColorComponent result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IPixelFormat::YUVColorComponent)com::xuggle::xuggler::IPixelFormat::YUV_V;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPixelFormat_1getYUV420PPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jshort jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int arg2 ;
  int arg3 ;
  com::xuggle::xuggler::IPixelFormat::YUVColorComponent arg4 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (com::xuggle::xuggler::IPixelFormat::YUVColorComponent)jarg4; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (unsigned char)com::xuggle::xuggler::IPixelFormat::getYUV420PPixel(arg1,arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPixelFormat_1setYUV420PPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jshort jarg5) {
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int arg2 ;
  int arg3 ;
  com::xuggle::xuggler::IPixelFormat::YUVColorComponent arg4 ;
  unsigned char arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (com::xuggle::xuggler::IPixelFormat::YUVColorComponent)jarg4; 
  arg5 = (unsigned char)jarg5; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      com::xuggle::xuggler::IPixelFormat::setYUV420PPixel(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPixelFormat_1getYUV420PPixelOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int arg2 ;
  int arg3 ;
  com::xuggle::xuggler::IPixelFormat::YUVColorComponent arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (com::xuggle::xuggler::IPixelFormat::YUVColorComponent)jarg4; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)com::xuggle::xuggler::IPixelFormat::getYUV420PPixelOffset(arg1,arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1getNumerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumerator();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1getDenominator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getDenominator();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)(arg1)->copy();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->compareTo(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1sCompareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)com::xuggle::xuggler::IRational::sCompareTo(arg1,arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (double)(arg1)->getDouble();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1reduce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->reduce(arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1sReduce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)com::xuggle::xuggler::IRational::sReduce(arg1,arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1multiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)(arg1)->multiply(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1sMultiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)com::xuggle::xuggler::IRational::sMultiply(arg1,arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1divide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)(arg1)->divide(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1sDivide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)com::xuggle::xuggler::IRational::sDivide(arg1,arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)(arg1)->subtract(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1sSubtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)com::xuggle::xuggler::IRational::sSubtract(arg1,arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)(arg1)->add(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1sAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)com::xuggle::xuggler::IRational::sAdd(arg1,arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1rescale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  int64_t arg2 ;
  com::xuggle::xuggler::IRational *arg3 = (com::xuggle::xuggler::IRational *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = *(com::xuggle::xuggler::IRational **)&jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->rescale(arg2,arg3);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1sRescale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *arg3 = (com::xuggle::xuggler::IRational *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (int64_t)jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  arg3 = *(com::xuggle::xuggler::IRational **)&jarg3; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)com::xuggle::xuggler::IRational::sRescale(arg1,arg2,arg3);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)com::xuggle::xuggler::IRational::make();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)com::xuggle::xuggler::IRational::make(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1make_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IRational *arg1 = (com::xuggle::xuggler::IRational *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IRational **)&jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)com::xuggle::xuggler::IRational::make(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IRational_1make_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  int32_t arg2 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)com::xuggle::xuggler::IRational::make(arg1,arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IMediaData_1getTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IMediaData *arg1 = (com::xuggle::xuggler::IMediaData *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IMediaData **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getTimeStamp();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IMediaData_1setTimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  com::xuggle::xuggler::IMediaData *arg1 = (com::xuggle::xuggler::IMediaData *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IMediaData **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setTimeStamp(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IMediaData_1getTimeBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IMediaData *arg1 = (com::xuggle::xuggler::IMediaData *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IMediaData **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)(arg1)->getTimeBase();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IMediaData_1setTimeBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  com::xuggle::xuggler::IMediaData *arg1 = (com::xuggle::xuggler::IMediaData *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IMediaData **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setTimeBase(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IMediaData_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IMediaData *arg1 = (com::xuggle::xuggler::IMediaData *) 0 ;
  com::xuggle::ferry::IBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IMediaData **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::ferry::IBuffer *)(arg1)->getData();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::ferry::IBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IMediaData_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IMediaData *arg1 = (com::xuggle::xuggler::IMediaData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IMediaData **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSize();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_IMediaData_1isKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::IMediaData *arg1 = (com::xuggle::xuggler::IMediaData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IMediaData **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isKey();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IMediaDataWrapper_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IMediaDataWrapper *arg1 = (com::xuggle::xuggler::IMediaDataWrapper *) 0 ;
  com::xuggle::xuggler::IMediaData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IMediaDataWrapper **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IMediaData *)(arg1)->get();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IMediaData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IMediaDataWrapper_1wrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  com::xuggle::xuggler::IMediaDataWrapper *arg1 = (com::xuggle::xuggler::IMediaDataWrapper *) 0 ;
  com::xuggle::xuggler::IMediaData *arg2 = (com::xuggle::xuggler::IMediaData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IMediaDataWrapper **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IMediaData **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->wrap(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IMediaDataWrapper_1setKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  com::xuggle::xuggler::IMediaDataWrapper *arg1 = (com::xuggle::xuggler::IMediaDataWrapper *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IMediaDataWrapper **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setKey(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IMediaDataWrapper_1make(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IMediaData *arg1 = (com::xuggle::xuggler::IMediaData *) 0 ;
  com::xuggle::xuggler::IMediaDataWrapper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IMediaData **)&jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IMediaDataWrapper *)com::xuggle::xuggler::IMediaDataWrapper::make(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IMediaDataWrapper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_ITimeValue_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  com::xuggle::xuggler::ITimeValue::Unit arg2 ;
  com::xuggle::xuggler::ITimeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (com::xuggle::xuggler::ITimeValue::Unit)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ITimeValue *)com::xuggle::xuggler::ITimeValue::make(arg1,arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::ITimeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_ITimeValue_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::ITimeValue *arg1 = (com::xuggle::xuggler::ITimeValue *) 0 ;
  com::xuggle::xuggler::ITimeValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::ITimeValue **)&jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ITimeValue *)com::xuggle::xuggler::ITimeValue::make(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::ITimeValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_ITimeValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::ITimeValue *arg1 = (com::xuggle::xuggler::ITimeValue *) 0 ;
  com::xuggle::xuggler::ITimeValue::Unit arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::ITimeValue **)&jarg1; 
  arg2 = (com::xuggle::xuggler::ITimeValue::Unit)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->get(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ITimeValue_1compareTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ITimeValue *arg1 = (com::xuggle::xuggler::ITimeValue *) 0 ;
  com::xuggle::xuggler::ITimeValue *arg2 = (com::xuggle::xuggler::ITimeValue *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::ITimeValue **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::ITimeValue **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->compareTo(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ITimeValue_1compare_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ITimeValue *arg1 = (com::xuggle::xuggler::ITimeValue *) 0 ;
  com::xuggle::xuggler::ITimeValue *arg2 = (com::xuggle::xuggler::ITimeValue *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::ITimeValue **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::ITimeValue **)&jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)com::xuggle::xuggler::ITimeValue::compare(arg1,arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ITimeValue_1compare_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int64_t)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)com::xuggle::xuggler::ITimeValue::compare(arg1,arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1CODEC_1ID_1PCM_1S16LE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::ICodec::ID)com::xuggle::xuggler::ICodec::CODEC_ID_PCM_S16LE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1CODEC_1ID_1ADPCM_1IMA_1QT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::ICodec::ID)com::xuggle::xuggler::ICodec::CODEC_ID_ADPCM_IMA_QT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1CODEC_1ID_1AMR_1NB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::ICodec::ID)com::xuggle::xuggler::ICodec::CODEC_ID_AMR_NB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1CODEC_1ID_1RA_1144_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::ICodec::ID)com::xuggle::xuggler::ICodec::CODEC_ID_RA_144;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1CODEC_1ID_1ROQ_1DPCM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::ICodec::ID)com::xuggle::xuggler::ICodec::CODEC_ID_ROQ_DPCM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1CODEC_1ID_1MP2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::ICodec::ID)com::xuggle::xuggler::ICodec::CODEC_ID_MP2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1CODEC_1ID_1DVD_1SUBTITLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::ICodec::ID)com::xuggle::xuggler::ICodec::CODEC_ID_DVD_SUBTITLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1CODEC_1ID_1TTF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::ICodec::ID)com::xuggle::xuggler::ICodec::CODEC_ID_TTF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1CODEC_1ID_1PROBE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::ICodec::ID)com::xuggle::xuggler::ICodec::CODEC_ID_PROBE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1CODEC_1ID_1MPEG2TS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec::ID result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::ICodec::ID)com::xuggle::xuggler::ICodec::CODEC_ID_MPEG2TS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1CODEC_1TYPE_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::ICodec::Type)com::xuggle::xuggler::ICodec::CODEC_TYPE_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  com::xuggle::xuggler::ICodec *arg1 = (com::xuggle::xuggler::ICodec *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::ICodec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getName();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1getIDAsInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec *arg1 = (com::xuggle::xuggler::ICodec *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::ICodec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getIDAsInt();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec *arg1 = (com::xuggle::xuggler::ICodec *) 0 ;
  com::xuggle::xuggler::ICodec::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::ICodec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ICodec::ID)(arg1)->getID();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::ICodec *arg1 = (com::xuggle::xuggler::ICodec *) 0 ;
  com::xuggle::xuggler::ICodec::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::ICodec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ICodec::Type)(arg1)->getType();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1canDecode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::ICodec *arg1 = (com::xuggle::xuggler::ICodec *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::ICodec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->canDecode();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1canEncode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::ICodec *arg1 = (com::xuggle::xuggler::ICodec *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::ICodec **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->canEncode();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1findEncodingCodec(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::ICodec::ID arg1 ;
  com::xuggle::xuggler::ICodec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (com::xuggle::xuggler::ICodec::ID)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ICodec *)com::xuggle::xuggler::ICodec::findEncodingCodec(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::ICodec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1findEncodingCodecByIntID(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  com::xuggle::xuggler::ICodec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ICodec *)com::xuggle::xuggler::ICodec::findEncodingCodecByIntID(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::ICodec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1findEncodingCodecByName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  com::xuggle::xuggler::ICodec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ICodec *)com::xuggle::xuggler::ICodec::findEncodingCodecByName((char const *)arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::ICodec **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1findDecodingCodec(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::ICodec::ID arg1 ;
  com::xuggle::xuggler::ICodec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (com::xuggle::xuggler::ICodec::ID)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ICodec *)com::xuggle::xuggler::ICodec::findDecodingCodec(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::ICodec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1findDecodingCodecByIntID(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  com::xuggle::xuggler::ICodec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ICodec *)com::xuggle::xuggler::ICodec::findDecodingCodecByIntID(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::ICodec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1findDecodingCodecByName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  com::xuggle::xuggler::ICodec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ICodec *)com::xuggle::xuggler::ICodec::findDecodingCodecByName((char const *)arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::ICodec **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_ICodec_1guessEncodingCodec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IContainerFormat *arg1 = (com::xuggle::xuggler::IContainerFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  com::xuggle::xuggler::ICodec::Type arg5 ;
  com::xuggle::xuggler::ICodec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainerFormat **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (com::xuggle::xuggler::ICodec::Type)jarg5; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ICodec *)com::xuggle::xuggler::ICodec::guessEncodingCodec(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::ICodec **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->reset();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1isComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isComplete();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1getPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPts();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1setPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setPts(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1getDts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getDts();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1setDts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setDts(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSize();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1getMaxSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getMaxSize();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1getStreamIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getStreamIndex();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getFlags();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1isKeyPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isKeyPacket();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getDuration();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPosition();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  com::xuggle::ferry::IBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::ferry::IBuffer *)(arg1)->getData();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::ferry::IBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1allocateNewPayload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IPacket *arg1 = (com::xuggle::xuggler::IPacket *) 0 ;
  int32_t arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IPacket **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->allocateNewPayload(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IPacket *)com::xuggle::xuggler::IPacket::make();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IPacket_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::ferry::IBuffer *arg1 = (com::xuggle::ferry::IBuffer *) 0 ;
  com::xuggle::xuggler::IPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::ferry::IBuffer **)&jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IPacket *)com::xuggle::xuggler::IPacket::make(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1FMT_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IAudioSamples::Format)com::xuggle::xuggler::IAudioSamples::FMT_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1isComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isComplete();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1getSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSampleRate();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1getChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getChannels();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1getSampleBitDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (uint32_t)(arg1)->getSampleBitDepth();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1getFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  com::xuggle::xuggler::IAudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IAudioSamples::Format)(arg1)->getFormat();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1getNumSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (uint32_t)(arg1)->getNumSamples();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1getMaxBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (uint32_t)(arg1)->getMaxBufferSize();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1getMaxSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (uint32_t)(arg1)->getMaxSamples();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1getSampleSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (uint32_t)(arg1)->getSampleSize();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1getPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPts();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1setPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setPts(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1getNextPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getNextPts();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1setComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7) {
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  bool arg2 ;
  uint32_t arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  com::xuggle::xuggler::IAudioSamples::Format arg6 ;
  int64_t arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  arg6 = (com::xuggle::xuggler::IAudioSamples::Format)jarg6; 
  arg7 = (int64_t)jarg7; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setComplete(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1setSample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  uint32_t arg2 ;
  int32_t arg3 ;
  com::xuggle::xuggler::IAudioSamples::Format arg4 ;
  int32_t arg5 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (com::xuggle::xuggler::IAudioSamples::Format)jarg4; 
  arg5 = (int32_t)jarg5; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setSample(arg2,arg3,arg4,arg5);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1getSample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples *arg1 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  uint32_t arg2 ;
  int32_t arg3 ;
  com::xuggle::xuggler::IAudioSamples::Format arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioSamples **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (com::xuggle::xuggler::IAudioSamples::Format)jarg4; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSample(arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1findSampleBitDepth(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IAudioSamples::Format arg1 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (com::xuggle::xuggler::IAudioSamples::Format)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (uint32_t)com::xuggle::xuggler::IAudioSamples::findSampleBitDepth(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1make(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  com::xuggle::xuggler::IAudioSamples *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IAudioSamples *)com::xuggle::xuggler::IAudioSamples::make(arg1,arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IAudioSamples **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1samplesToDefaultPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)com::xuggle::xuggler::IAudioSamples::samplesToDefaultPts(arg1,arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioSamples_1defaultPtsToSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int)jarg2; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)com::xuggle::xuggler::IAudioSamples::defaultPtsToSamples(arg1,arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioResampler_1getOutputChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IAudioResampler *arg1 = (com::xuggle::xuggler::IAudioResampler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioResampler **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getOutputChannels();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioResampler_1getOutputRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IAudioResampler *arg1 = (com::xuggle::xuggler::IAudioResampler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioResampler **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getOutputRate();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioResampler_1getInputChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IAudioResampler *arg1 = (com::xuggle::xuggler::IAudioResampler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioResampler **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getInputChannels();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioResampler_1getInputRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IAudioResampler *arg1 = (com::xuggle::xuggler::IAudioResampler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IAudioResampler **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getInputRate();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioResampler_1resample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IAudioResampler *arg1 = (com::xuggle::xuggler::IAudioResampler *) 0 ;
  com::xuggle::xuggler::IAudioSamples *arg2 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  com::xuggle::xuggler::IAudioSamples *arg3 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  unsigned int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(com::xuggle::xuggler::IAudioResampler **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IAudioSamples **)&jarg2; 
  arg3 = *(com::xuggle::xuggler::IAudioSamples **)&jarg3; 
  arg4 = (unsigned int)jarg4; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->resample(arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IAudioResampler_1make(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  com::xuggle::xuggler::IAudioResampler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IAudioResampler *)com::xuggle::xuggler::IAudioResampler::make(arg1,arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IAudioResampler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1isKeyFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isKeyFrame();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1setKeyFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setKeyFrame(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1isComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isComplete();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSize();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getWidth();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getHeight();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1getPixelType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  com::xuggle::xuggler::IPixelFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IPixelFormat::Type)(arg1)->getPixelType();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1getPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getPts();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1setPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setPts(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1getQuality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getQuality();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1setQuality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setQuality(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1getDataLineSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getDataLineSize(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1setComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6) {
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  bool arg2 ;
  com::xuggle::xuggler::IPixelFormat::Type arg3 ;
  int arg4 ;
  int arg5 ;
  int64_t arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (com::xuggle::xuggler::IPixelFormat::Type)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int64_t)jarg6; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setComplete(arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  com::xuggle::xuggler::IVideoPicture *arg2 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IVideoPicture **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->copy(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1make_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IPixelFormat::Type arg1 ;
  int arg2 ;
  int arg3 ;
  com::xuggle::xuggler::IVideoPicture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (com::xuggle::xuggler::IPixelFormat::Type)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IVideoPicture *)com::xuggle::xuggler::IVideoPicture::make(arg1,arg2,arg3);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IVideoPicture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoPicture_1make_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IVideoPicture *arg1 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  com::xuggle::xuggler::IVideoPicture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoPicture **)&jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IVideoPicture *)com::xuggle::xuggler::IVideoPicture::make(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IVideoPicture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoResampler_1getInputWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoResampler *arg1 = (com::xuggle::xuggler::IVideoResampler *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoResampler **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getInputWidth();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoResampler_1getInputHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoResampler *arg1 = (com::xuggle::xuggler::IVideoResampler *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoResampler **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getInputHeight();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoResampler_1getInputPixelFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoResampler *arg1 = (com::xuggle::xuggler::IVideoResampler *) 0 ;
  com::xuggle::xuggler::IPixelFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoResampler **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IPixelFormat::Type)(arg1)->getInputPixelFormat();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoResampler_1getOutputWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoResampler *arg1 = (com::xuggle::xuggler::IVideoResampler *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoResampler **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getOutputWidth();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoResampler_1getOutputHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoResampler *arg1 = (com::xuggle::xuggler::IVideoResampler *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoResampler **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getOutputHeight();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoResampler_1getOutputPixelFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoResampler *arg1 = (com::xuggle::xuggler::IVideoResampler *) 0 ;
  com::xuggle::xuggler::IPixelFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IVideoResampler **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IPixelFormat::Type)(arg1)->getOutputPixelFormat();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoResampler_1resample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IVideoResampler *arg1 = (com::xuggle::xuggler::IVideoResampler *) 0 ;
  com::xuggle::xuggler::IVideoPicture *arg2 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  com::xuggle::xuggler::IVideoPicture *arg3 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(com::xuggle::xuggler::IVideoResampler **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IVideoPicture **)&jarg2; 
  arg3 = *(com::xuggle::xuggler::IVideoPicture **)&jarg3; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->resample(arg2,arg3);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoResampler_1make(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  int32_t arg2 ;
  com::xuggle::xuggler::IPixelFormat::Type arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  com::xuggle::xuggler::IPixelFormat::Type arg6 ;
  com::xuggle::xuggler::IVideoResampler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (com::xuggle::xuggler::IPixelFormat::Type)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = (int32_t)jarg5; 
  arg6 = (com::xuggle::xuggler::IPixelFormat::Type)jarg6; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IVideoResampler *)com::xuggle::xuggler::IVideoResampler::make(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IVideoResampler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_IVideoResampler_1isSupported(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::IVideoResampler::Feature arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (com::xuggle::xuggler::IVideoResampler::Feature)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)com::xuggle::xuggler::IVideoResampler::isSupported(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1QSCALE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_QSCALE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_14MV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_4MV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1QPEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_QPEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1GMC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_GMC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1MV0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_MV0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1PART_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_PART;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1INPUT_1PRESERVED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_INPUT_PRESERVED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1PASS1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_PASS1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1PASS2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_PASS2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1EXTERN_1HUFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_EXTERN_HUFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1GRAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_GRAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1EMU_1EDGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_EMU_EDGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1PSNR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_PSNR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1TRUNCATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_TRUNCATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1NORMALIZE_1AQP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_NORMALIZE_AQP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1INTERLACED_1DCT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_INTERLACED_DCT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1LOW_1DELAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_LOW_DELAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1ALT_1SCAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_ALT_SCAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1TRELLIS_1QUANT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_TRELLIS_QUANT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1GLOBAL_1HEADER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_GLOBAL_HEADER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1BITEXACT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_BITEXACT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1AC_1PRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_AC_PRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1H263P_1UMV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_H263P_UMV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1CBP_1RD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_CBP_RD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1QP_1RD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_QP_RD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1H263P_1AIV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_H263P_AIV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1OBMC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_OBMC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1LOOP_1FILTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_LOOP_FILTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1H263P_1SLICE_1STRUCT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_H263P_SLICE_STRUCT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1INTERLACED_1ME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_INTERLACED_ME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1SVCD_1SCAN_1OFFSET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_SVCD_SCAN_OFFSET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG_1CLOSED_1GOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG_CLOSED_GOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1FAST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_FAST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1STRICT_1GOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_STRICT_GOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1NO_1OUTPUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_NO_OUTPUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1LOCAL_1HEADER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_LOCAL_HEADER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1BPYRAMID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_BPYRAMID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1WPRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_WPRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1MIXED_1REFS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_MIXED_REFS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_18X8DCT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_8X8DCT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1FASTPSKIP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_FASTPSKIP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1AUD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_AUD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1BRDO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_BRDO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1INTRA_1VLC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_INTRA_VLC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1MEMC_1ONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_MEMC_ONLY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1DROP_1FRAME_1TIMECODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_DROP_FRAME_TIMECODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1SKIP_1RD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_SKIP_RD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1CHUNKS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_CHUNKS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1NON_1LINEAR_1QUANT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_NON_LINEAR_QUANT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1FLAG2_1BIT_1RESERVOIR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags result;
  
  (void)jenv;
  (void)jcls;
  result = (com::xuggle::xuggler::IStreamCoder::Flags)com::xuggle::xuggler::IStreamCoder::FLAG2_BIT_RESERVOIR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IStreamCoder::Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IStreamCoder::Direction)(arg1)->getDirection();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IStream *)(arg1)->getStream();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getCodec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::ICodec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ICodec *)(arg1)->getCodec();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::ICodec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getCodecType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::ICodec::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ICodec::Type)(arg1)->getCodecType();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getCodecID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::ICodec::ID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::ICodec::ID)(arg1)->getCodecID();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setCodec_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::ICodec *arg2 = (com::xuggle::xuggler::ICodec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::ICodec **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setCodec(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setCodec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::ICodec::ID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (com::xuggle::xuggler::ICodec::ID)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setCodec(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getBitRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getBitRate();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setBitRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setBitRate(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getBitRateTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getBitRateTolerance();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setBitRateTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setBitRateTolerance(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getHeight();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setHeight(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getWidth();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setWidth(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getTimeBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)(arg1)->getTimeBase();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setTimeBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setTimeBase(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getFrameRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)(arg1)->getFrameRate();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setFrameRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IRational *arg2 = (com::xuggle::xuggler::IRational *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IRational **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setFrameRate(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getNumPicturesInGroupOfPictures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumPicturesInGroupOfPictures();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setNumPicturesInGroupOfPictures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setNumPicturesInGroupOfPictures(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getPixelType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IPixelFormat::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IPixelFormat::Type)(arg1)->getPixelType();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setPixelType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IPixelFormat::Type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (com::xuggle::xuggler::IPixelFormat::Type)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setPixelType(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getSampleRate();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setSampleRate(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getSampleFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IAudioSamples::Format result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IAudioSamples::Format)(arg1)->getSampleFormat();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setSampleFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IAudioSamples::Format arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (com::xuggle::xuggler::IAudioSamples::Format)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setSampleFormat(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getChannels();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setChannels(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getAudioFrameSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getAudioFrameSize();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getGlobalQuality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getGlobalQuality();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setGlobalQuality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setGlobalQuality(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getFlags();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setFlags(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (com::xuggle::xuggler::IStreamCoder::Flags)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->getFlag(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1setFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IStreamCoder::Flags arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = (com::xuggle::xuggler::IStreamCoder::Flags)jarg2; 
  arg3 = jarg3 ? true : false; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return ;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      (arg1)->setFlag(arg2,arg3);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return ;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return ;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1getNextPredictedPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getNextPredictedPts();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->open();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->close();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1decodeAudio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IAudioSamples *arg2 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  com::xuggle::xuggler::IPacket *arg3 = (com::xuggle::xuggler::IPacket *) 0 ;
  int32_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IAudioSamples **)&jarg2; 
  arg3 = *(com::xuggle::xuggler::IPacket **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->decodeAudio(arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1decodeVideo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IVideoPicture *arg2 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  com::xuggle::xuggler::IPacket *arg3 = (com::xuggle::xuggler::IPacket *) 0 ;
  int32_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IVideoPicture **)&jarg2; 
  arg3 = *(com::xuggle::xuggler::IPacket **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->decodeVideo(arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1encodeVideo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IPacket *arg2 = (com::xuggle::xuggler::IPacket *) 0 ;
  com::xuggle::xuggler::IVideoPicture *arg3 = (com::xuggle::xuggler::IVideoPicture *) 0 ;
  int32_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IPacket **)&jarg2; 
  arg3 = *(com::xuggle::xuggler::IVideoPicture **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->encodeVideo(arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1encodeAudio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder *arg1 = (com::xuggle::xuggler::IStreamCoder *) 0 ;
  com::xuggle::xuggler::IPacket *arg2 = (com::xuggle::xuggler::IPacket *) 0 ;
  com::xuggle::xuggler::IAudioSamples *arg3 = (com::xuggle::xuggler::IAudioSamples *) 0 ;
  uint32_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(com::xuggle::xuggler::IStreamCoder **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IPacket **)&jarg2; 
  arg3 = *(com::xuggle::xuggler::IAudioSamples **)&jarg3; 
  arg4 = (uint32_t)jarg4; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->encodeAudio(arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStreamCoder_1make(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStreamCoder::Direction arg1 ;
  com::xuggle::xuggler::IStreamCoder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (com::xuggle::xuggler::IStreamCoder::Direction)jarg1; 
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IStreamCoder *)com::xuggle::xuggler::IStreamCoder::make(arg1);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IStreamCoder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStream_1getDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStream *arg1 = (com::xuggle::xuggler::IStream *) 0 ;
  com::xuggle::xuggler::IStream::Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IStream::Direction)(arg1)->getDirection();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStream_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStream *arg1 = (com::xuggle::xuggler::IStream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getIndex();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStream_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStream *arg1 = (com::xuggle::xuggler::IStream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getId();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStream_1getStreamCoder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStream *arg1 = (com::xuggle::xuggler::IStream *) 0 ;
  com::xuggle::xuggler::IStreamCoder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IStreamCoder *)(arg1)->getStreamCoder();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IStreamCoder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStream_1getFrameRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStream *arg1 = (com::xuggle::xuggler::IStream *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)(arg1)->getFrameRate();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStream_1getTimeBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStream *arg1 = (com::xuggle::xuggler::IStream *) 0 ;
  com::xuggle::xuggler::IRational *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IRational *)(arg1)->getTimeBase();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IRational **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStream_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStream *arg1 = (com::xuggle::xuggler::IStream *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getStartTime();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStream_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStream *arg1 = (com::xuggle::xuggler::IStream *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getDuration();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStream_1getCurrentDts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStream *arg1 = (com::xuggle::xuggler::IStream *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getCurrentDts();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStream_1getNumIndexEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IStream *arg1 = (com::xuggle::xuggler::IStream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)(arg1)->getNumIndexEntries();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IStream_1getNumFrames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IStream *arg1 = (com::xuggle::xuggler::IStream *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IStream **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getNumFrames();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainerFormat_1setInputFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainerFormat *arg1 = (com::xuggle::xuggler::IContainerFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainerFormat **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setInputFormat((char const *)arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainerFormat_1setOutputFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainerFormat *arg1 = (com::xuggle::xuggler::IContainerFormat *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainerFormat **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setOutputFormat((char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainerFormat_1getInputFormatShortName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  com::xuggle::xuggler::IContainerFormat *arg1 = (com::xuggle::xuggler::IContainerFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainerFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getInputFormatShortName();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainerFormat_1getInputFormatLongName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  com::xuggle::xuggler::IContainerFormat *arg1 = (com::xuggle::xuggler::IContainerFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainerFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getInputFormatLongName();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainerFormat_1getOutputFormatShortName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  com::xuggle::xuggler::IContainerFormat *arg1 = (com::xuggle::xuggler::IContainerFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainerFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getOutputFormatShortName();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainerFormat_1getOutputFormatLongName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  com::xuggle::xuggler::IContainerFormat *arg1 = (com::xuggle::xuggler::IContainerFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainerFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getOutputFormatLongName();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainerFormat_1getOutputFormatMimeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  com::xuggle::xuggler::IContainerFormat *arg1 = (com::xuggle::xuggler::IContainerFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainerFormat **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)(arg1)->getOutputFormatMimeType();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainerFormat_1make(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IContainerFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IContainerFormat *)com::xuggle::xuggler::IContainerFormat::make();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IContainerFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1setInputBufferLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  uint32_t arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->setInputBufferLength(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1getInputBufferLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (uint32_t)(arg1)->getInputBufferLength();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1isOpened(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isOpened();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1isHeaderWritten(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (bool)(arg1)->isHeaderWritten();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  com::xuggle::xuggler::IContainer::Type arg3 ;
  com::xuggle::xuggler::IContainerFormat *arg4 = (com::xuggle::xuggler::IContainerFormat *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (com::xuggle::xuggler::IContainer::Type)jarg3; 
  arg4 = *(com::xuggle::xuggler::IContainerFormat **)&jarg4; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->open((char const *)arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  char *arg2 = (char *) 0 ;
  com::xuggle::xuggler::IContainer::Type arg3 ;
  com::xuggle::xuggler::IContainerFormat *arg4 = (com::xuggle::xuggler::IContainerFormat *) 0 ;
  bool arg5 ;
  bool arg6 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (com::xuggle::xuggler::IContainer::Type)jarg3; 
  arg4 = *(com::xuggle::xuggler::IContainerFormat **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->open((char const *)arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1getContainerFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  com::xuggle::xuggler::IContainerFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IContainerFormat *)(arg1)->getContainerFormat();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IContainerFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->close();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  com::xuggle::xuggler::IContainer::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IContainer::Type)(arg1)->getType();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1getNumStreams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getNumStreams();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1getStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  uint32_t arg2 ;
  com::xuggle::xuggler::IStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IStream *)(arg1)->getStream(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1addNewStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  int32_t arg2 ;
  com::xuggle::xuggler::IStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IStream *)(arg1)->addNewStream(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1writeHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->writeHeader();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1writeTrailer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->writeTrailer();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1readNextPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  com::xuggle::xuggler::IPacket *arg2 = (com::xuggle::xuggler::IPacket *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IPacket **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->readNextPacket(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1writePacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  com::xuggle::xuggler::IPacket *arg2 = (com::xuggle::xuggler::IPacket *) 0 ;
  bool arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IPacket **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->writePacket(arg2,arg3);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1writePacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  com::xuggle::xuggler::IPacket *arg2 = (com::xuggle::xuggler::IPacket *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  arg2 = *(com::xuggle::xuggler::IPacket **)&jarg2; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->writePacket(arg2);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1make(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (com::xuggle::xuggler::IContainer *)com::xuggle::xuggler::IContainer::make();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  *(com::xuggle::xuggler::IContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1queryStreamMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->queryStreamMetaData();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1seekKeyFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  int arg2 ;
  int64_t arg3 ;
  int32_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int32_t)jarg4; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->seekKeyFrame(arg2,arg3,arg4);
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getDuration();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getStartTime();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1getFileSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)(arg1)->getFileSize();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_IContainer_1getBitRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  com::xuggle::xuggler::IContainer *arg1 = (com::xuggle::xuggler::IContainer *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(com::xuggle::xuggler::IContainer **)&jarg1; 
  
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException,
      "invalid native object; delete() likely already called");
    return 0;
  }
  
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)(arg1)->getBitRate();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_Global_1NO_1PTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  result = (long long)com::xuggle::xuggler::Global::NO_PTS;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_Global_1DEFAULT_1PTS_1PER_1SECOND_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  result = (long long)com::xuggle::xuggler::Global::DEFAULT_PTS_PER_SECOND;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_Global_1getVersion(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int64_t)com::xuggle::xuggler::Global::getVersion();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_Global_1getVersionMajor(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)com::xuggle::xuggler::Global::getVersionMajor();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_Global_1getVersionMinor(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)com::xuggle::xuggler::Global::getVersionMinor();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_Global_1getVersionRevision(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int32_t)com::xuggle::xuggler::Global::getVersionRevision();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_xuggle_xuggler_XugglerJNI_Global_1getVersionStr(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)com::xuggle::xuggler::Global::getVersionStr();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_Global_1getAVFormatVersion(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)com::xuggle::xuggler::Global::getAVFormatVersion();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_xuggle_xuggler_XugglerJNI_Global_1getAVFormatVersionStr(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)com::xuggle::xuggler::Global::getAVFormatVersionStr();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_xuggle_xuggler_XugglerJNI_Global_1getAVCodecVersion(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (int)com::xuggle::xuggler::Global::getAVCodecVersion();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_xuggle_xuggler_XugglerJNI_Global_1getAVCodecVersionStr(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    // JNIHelper.swg: Start generated code
    // >>>>>>>>>>>>>>>>>>>>>>>>>>>
    try
    {
      result = (char *)com::xuggle::xuggler::Global::getAVCodecVersionStr();
    }
    catch(std::exception & e)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, e.what());
      }
      return 0;
    }
    catch(...)
    {
      // we don't let a native exception override a java exception
      if (!jenv->ExceptionCheck())
      {
        jclass cls=jenv->FindClass("java/lang/RuntimeException");
        jenv->ThrowNew(cls, "Unhandled and unknown native exception");
      }
      return 0;
    }
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<
    // JNIHelper.swg: End generated code
  }
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIPixelFormatUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::ferry::RefCounted **)&baseptr = *(com::xuggle::xuggler::IPixelFormat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIRationalUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::ferry::RefCounted **)&baseptr = *(com::xuggle::xuggler::IRational **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIMediaDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::ferry::RefCounted **)&baseptr = *(com::xuggle::xuggler::IMediaData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIMediaDataWrapperUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::xuggler::IMediaData **)&baseptr = *(com::xuggle::xuggler::IMediaDataWrapper **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGITimeValueUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::ferry::RefCounted **)&baseptr = *(com::xuggle::xuggler::ITimeValue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGICodecUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::ferry::RefCounted **)&baseptr = *(com::xuggle::xuggler::ICodec **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIPacketUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::xuggler::IMediaData **)&baseptr = *(com::xuggle::xuggler::IPacket **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIAudioSamplesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::xuggler::IMediaData **)&baseptr = *(com::xuggle::xuggler::IAudioSamples **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIAudioResamplerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::ferry::RefCounted **)&baseptr = *(com::xuggle::xuggler::IAudioResampler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIVideoPictureUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::xuggler::IMediaData **)&baseptr = *(com::xuggle::xuggler::IVideoPicture **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIVideoResamplerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::ferry::RefCounted **)&baseptr = *(com::xuggle::xuggler::IVideoResampler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIStreamCoderUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::ferry::RefCounted **)&baseptr = *(com::xuggle::xuggler::IStreamCoder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIStreamUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::ferry::RefCounted **)&baseptr = *(com::xuggle::xuggler::IStream **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIContainerFormatUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::ferry::RefCounted **)&baseptr = *(com::xuggle::xuggler::IContainerFormat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGIContainerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::ferry::RefCounted **)&baseptr = *(com::xuggle::xuggler::IContainer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_xuggle_xuggler_XugglerJNI_SWIGGlobalUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(com::xuggle::ferry::RefCounted **)&baseptr = *(com::xuggle::xuggler::Global **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

