/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.37
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.xuggle.xuggler;
import com.xuggle.ferry.*;
/**
 * This class wraps an IMediaData object, but then allows you to set 
 *  
 * new TimeStamps and TimeBases.  
 * The underlying wrapped object's time stamps and time bases do not 
 * change. This  
 * can be useful when you need to use a IMediaObject in a time space 
 * that has  
 * different time bases than the frame originally expected, and you 
 * don't  
 * want to change the actual object.  
 */
public class IMediaDataWrapper extends IMediaData {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  protected IMediaDataWrapper(long cPtr, boolean cMemoryOwn) {
    super(XugglerJNI.SWIGIMediaDataWrapperUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(IMediaDataWrapper obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new IMediaDataWrapper object that is actually referring to the
   * exact same underlying native object.
   *
   * This method increases the ref count of the underlying Native object.
   *
   * @return the new Java object.
   */
  public IMediaDataWrapper copyReference() {
    if (swigCPtr == 0)
      return null;
    else
    {
      // acquire before making copy to avoid memory allocator being
      // overridden
      IMediaDataWrapper retval = null;
      this.acquire();
      try {
         retval = new IMediaDataWrapper(swigCPtr, false);
      } catch (Throwable t) {
        this.release();
        throw new RuntimeException(t);
      }
      return retval;
    }
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof IMediaDataWrapper)
      equal = (((IMediaDataWrapper)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  /**
   * Releases any underlying native memory and marks this object
   * as invalid.
   * <p>
   * Normally Ferry manages when to release native memory.
   * </p>
   * <p>
   * In the unlikely event you want to control EXACTLY when a native 
   * object is released, each Xuggler object has a {@link #delete()}
   * method that you can use. Once you call {@link #delete()},
   * you must ENSURE your object is never referenced again from
   * that Java object -- Ferry tries to help you avoid crashes if you
   * accidentally use an object after deletion but on this but we
   * cannot offer 100% protection (specifically if another thread
   *  is accessing that object EXACTLY when you {@link #delete()} it). 
   * </p>
   */
  

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      throw new UnsupportedOperationException("C++ destructor does not have public access");
    }
    swigCPtr = 0;
    super.delete();
  }


  /**
   * Return the object being wrapped
   * 
   * @return the wrapped object
   */
  public IMediaData get()
  {
    IMediaData retval = null;
    if ((retval = getVideoPicture()) == null)
      if ((retval = getAudioSamples()) == null)
        if ((retval = getPacket()) == null)
          if ((retval = getMediaDataWrapper()) == null)
            retval = null;
    return retval;
  }
  
  /**
   * Gets the non IMediaDataWrapper object ultimately wrapped in this
   * wrapper, or null if there isn't one.
   * 
   * @return The non IMediaDataWrapper object ultimately wrapped
   */
  public IMediaData unwrap()
  {
    IMediaData retval = null;
    if ((retval = unwrapVideoPicture()) == null)
      if ((retval = unwrapAudioSamples()) == null)
        if ((retval = unwrapPacket()) == null)
          if ((retval = unwrapMediaDataWrapper()) == null)
            retval = null;
    return retval;
  }

/**
 * Set an object to wrap, or null to release the old object.  
 * @param	aObj The object to wrap; null just releases the last object 
 *		  
 */
  public void wrap(IMediaData aObj) {
    XugglerJNI.IMediaDataWrapper_wrap(swigCPtr, this, IMediaData.getCPtr(aObj), aObj);
  }

/**
 * Allows you to reset whether the wrapper things this is key or not. 
 *  
 * Note the underlying wrapped object will continue to keep it's prior 
 * setting.  
 * @param	aIsKey The new key value.  
 */
  public void setKey(boolean aIsKey) {
    XugglerJNI.IMediaDataWrapper_setKey(swigCPtr, this, aIsKey);
  }

/**
 *  
 * @param	obj The object to wrap.  
 * @return	a new object or null on error.  
 */
  public static IMediaDataWrapper make(IMediaData obj) {
    long cPtr = XugglerJNI.IMediaDataWrapper_make(IMediaData.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new IMediaDataWrapper(cPtr, false);
  }

  protected IPacket getPacket() {
    long cPtr = XugglerJNI.IMediaDataWrapper_getPacket(swigCPtr, this);
    return (cPtr == 0) ? null : new IPacket(cPtr, false);
  }

  protected IAudioSamples getAudioSamples() {
    long cPtr = XugglerJNI.IMediaDataWrapper_getAudioSamples(swigCPtr, this);
    return (cPtr == 0) ? null : new IAudioSamples(cPtr, false);
  }

  protected IVideoPicture getVideoPicture() {
    long cPtr = XugglerJNI.IMediaDataWrapper_getVideoPicture(swigCPtr, this);
    return (cPtr == 0) ? null : new IVideoPicture(cPtr, false);
  }

  protected IMediaDataWrapper getMediaDataWrapper() {
    long cPtr = XugglerJNI.IMediaDataWrapper_getMediaDataWrapper(swigCPtr, this);
    return (cPtr == 0) ? null : new IMediaDataWrapper(cPtr, false);
  }

  protected IPacket unwrapPacket() {
    long cPtr = XugglerJNI.IMediaDataWrapper_unwrapPacket(swigCPtr, this);
    return (cPtr == 0) ? null : new IPacket(cPtr, false);
  }

  protected IAudioSamples unwrapAudioSamples() {
    long cPtr = XugglerJNI.IMediaDataWrapper_unwrapAudioSamples(swigCPtr, this);
    return (cPtr == 0) ? null : new IAudioSamples(cPtr, false);
  }

  protected IVideoPicture unwrapVideoPicture() {
    long cPtr = XugglerJNI.IMediaDataWrapper_unwrapVideoPicture(swigCPtr, this);
    return (cPtr == 0) ? null : new IVideoPicture(cPtr, false);
  }

  protected IMediaDataWrapper unwrapMediaDataWrapper() {
    long cPtr = XugglerJNI.IMediaDataWrapper_unwrapMediaDataWrapper(swigCPtr, this);
    return (cPtr == 0) ? null : new IMediaDataWrapper(cPtr, false);
  }

}
